#include<iostream>

using namespace std;
int res[1000];
int depth;

//依据基准值进行分区的过程，快排的核心
int Partition(int A[],int low,int high){
    int pivot = A[low]; //将第一个元素设为基准值，根据严蔚敏的教材
    while(low<high){ //分区结束条件
        while(low<high&&A[high]>=pivot)high--;
        A[low] = A[high];
        while(low<high&&A[low]<=pivot)low++;
        A[high]=A[low];
    }//while
    A[low] = pivot; //结束的时候low==high==基准值的最终位置
    //for(int k=0;k<n;k++)cout << A[k] << ' '; 
    //cout << endl;

    return low;
}//Partition

void QuickSort(int A[],int depth,int low,int high){
     
    if(low<high){
        int pivotpos = Partition(A,low,high); //返回分区后的基准值
        //if(depth==1)res[pivotpos]=A[pivotpos];
        if(depth==1)res[pivotpos]=A[pivotpos];
        if(depth==2){
        for(int i=low;i<=high;i++)
            res[i]=A[i];}
        QuickSort(A,depth+1,low,pivotpos-1);//对左子表进行递归排序
        QuickSort(A,depth+1,pivotpos+1,high);//对右子表进行递归排序
    }
    
    
}//QuickSort

int main() {
    int m;
    cin >> m;
    for(int i=0; i<m; i++){//m个sample
        int n;
        cin >> n; //8<n<1000
        int v[n];
        for(int j=0; j<n; j++)
            cin >> v[j];
        QuickSort(v,1,0,n-1);
        for(int k = 0; k < n; k++) cout << res[k] << ' ';
        cout << endl;
    }
        
    return 0;
}
